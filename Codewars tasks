1) Is Integer Array? 6kyu

function isIntArray(arr) {
  return Array.isArray(arr) && arr.every(function (x) { return Math.floor(x) === x });
}

-------------------------------------------------------------------------------------------------------------------------------------------
2) Coding Meetup #15 - Higher-Order Functions Series - Find the odd names 6kyu
Write a function that when executed as findOddNames(list1) returns only the developers where 
if you add the ASCII representation of all characters in their first names, the result will be an odd number

function findOddNames(list) {
  let newArr = [];
  let lastArr = [];

  for (let i=0; i<list.length; i++) {
      newArr.push(list[i].firstName
        .split('')
        .map(val => val.charCodeAt(0))
        .reduce((acc, val) => acc + val));
  }

  for (let i = 0; i<newArr.length; i++) {
      if (newArr[i] % 2 === 1) {
          lastArr.push(list[i]);
      }
    }
  return lastArr;
}

-------------------------------------------------------------------------------------------------------------------------------------------
3) Where is my parent!?(cry) 6kyu
Test.expect("BbbEeee" == findChildren("beeeEBb"));
Test.expect("EeeUuuWww" == findChildren("uwwWUueEe"));

function findChildren(dancingBrigade){
 let finish = [];
  let arr = (dancingBrigade.split('')
      .map(val => val.toLowerCase())
      .sort());
  

  for (let i=0; i<arr.length; i++) {
    if (arr[i-1] != arr[i]) {
      finish.push(arr[i].toUpperCase());
    } else {
      finish.push(arr[i]);
    }
  }
  return finish.join('');
};

-------------------------------------------------------------------------------------------------------------------------------------------
4) Definition (Primorial Of a Number) 6kyu
Output Examples:
1- numPrimorial (3) ==> return (30)
Explanation:
Since the passed number is (3) ,Then the primorial should obtained by multiplying 2 * 3 * 5 = 30 .
2- numPrimorial (5) ==> return (2310)
Explanation:
Since the passed number is (5) ,Then the primorial should obtained by multiplying 2 * 3 * 5 * 7 * 11 = 2310 .

let counter = 0;
let val = 0;
let arr = [];
let res;

function numPrimorial(n){
  
  for (let i = 2; ; i++) {
    for (let j = i; j > 1; j--) {
      if (i % j === 0 && i != j) {
        val++;
      }
    }
    
    if (val === 0) {
      arr.push(i);
      counter++;
    }
    
    val = 0;
    
    if (counter === n) {
      let res = arr.reduce((acc, val) => acc*val, 1);
      arr.length = 0;
      counter = 0;
      return res;
    }
  }
}

-------------------------------------------------------------------------------------------------------------------------------------------
5)New Cashier Does Not Know About Space or Shift 6kyu
All the orders they create look something like this:

"milkshakepizzachickenfriescokeburgerpizzasandwichmilkshakepizza"

The kitchen staff are threatening to quit, because of how difficult it is to read the orders.
Their preference is to get the orders as a nice clean string with spaces and capitals like so:

"Burger Fries Chicken Pizza Pizza Pizza Sandwich Milkshake Milkshake Coke"


function getOrder(input) {
  
  let newInput = input.split('');
  let emptyArr = [];
  let finalArr = [];
  for (let i=0; i<newInput.length; i++) {
    
    emptyArr.push(newInput[i]);
    
    if (arr.includes(emptyArr.join(''))) {
     
      finalArr.push(emptyArr.join(''))
      console.log(emptyArr);
      console.log(finalArr);
      emptyArr.length = 0;    
    };
    
  }
  
  for (let i = 0; i < finalArr.length; i++) {
    finalArr[i] = finalArr[i][0].toUpperCase() + finalArr[i].substr(1);
  };
  return finalArr.sort().join(' ');
}

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! more correct answer
const getOrder = input => {
  const menu = ['Burger','Fries','Chicken','Pizza','Sandwich','Onionrings','Milkshake','Coke'];
  let orders = input.match(new RegExp(menu.join('|'), 'gi'))
                    .map(item => item[0].toUpperCase() + item.slice(1))
                    .sort((a,b) => menu.indexOf(a) - menu.indexOf(b));
  return orders.join(' ');
};

------------------------------------------------------------------------------------------------------------------------------------------
6)Who likes it? 6kyu
[]                                -->  "no one likes this"
["Peter"]                         -->  "Peter likes this"
["Jacob", "Alex"]                 -->  "Jacob and Alex like this"
["Max", "John", "Mark"]           -->  "Max, John and Mark like this"
["Alex", "Jacob", "Mark", "Max"]  -->  "Alex, Jacob and 2 others like this"

function likes(names) {
  if (names.length == 0) {
    return 'no one likes this'
  }
  if (names.length == 1) {
    return names.join().concat(' likes this');
  }
  if (names.length == 2) {
    return names[0].concat(' and ').concat(names[1]).concat(' like this');
  }
  if (names.length == 3) {
    return names[0].concat(', ').concat(names[1]).concat(' and ').concat(names[2]).concat(' like this');
  } else {
    return names[0].concat(', ').concat(names[1]).concat(' and ').concat(names.length-2).concat(' others like this');
  }
}

-------------------------------------------------------------------------------------------------------------------------------------------
7)Sort the odd 6kyu

function sortArray(array) {
  var odds = [];
  //loop, if it's odd, push to odds array
  for (var i = 0; i < array.length; ++i) {
    if (array[i]%2 !== 0) {
      odds.push(array[i]);
    }
  }
  //sort odds from smallest to largest
  odds.sort(function(a,b){
    return a-b;
  });
  
  //loop through array, replace any odd values with sorted odd values
  for (var j = 0; j < array.length; ++j) {
    if (array[j]%2 !== 0) {
      array[j] = odds.shift();
    }
  }
  
 return array;
}

-------------------------------------------------------------------------------------------------------------------------------------------
8)Persistent Bugger 6kyu
Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence,
which is the number of times you must multiply the digits in num until you reach a single digit.

let counter = 0;
let result = 0;
function persistence(num) {
  console.log(counter);
  if (num.toString().split('').length <= 1) {
    let result = counter;
    counter = 0;
    return result;
  }
  let value = num.toString().split('').reduce((acc, val) => acc*val, 1);
  counter++;
  return persistence(value);
}

-------------------------------------------------------------------------------------------------------------------------------------------
9)Printer Errors 7kyu
s="aaabbbbhaijjjm"
printer_error(s) => "0/14"
s="aaaxbbbbyyhwawiwjjjwwm"
printer_error(s) => "8/22"

function printerError(s) {
  let reg = /[n-z]/gi;
  let len = s.toString().length;
  let matches = s.match(reg);
  if (matches === null) {
    matches = [];
  }
  let result = `${matches.length}/${len}`;
  return result;
}

-------------------------------------------------------------------------------------------------------------------------------------------
10)Are they the "same"? 6kyu
a1 = [121, 144, 19, 161, 19, 144, 19, 11];
a2 = [11*11, 121*121, 144*144, 19*19, 161*161, 19*19, 144*144, 19*19];
Test.assertEquals(comp(a1, a2), true);

function comp(array1, array2){
  let counter = 0;
  console.log(array1, array2);
  if (!array1 || !array2) {
    return false;
  }
  for (let i=0; i<array1.length; i++) {
    for (let j=0; j<array2.length; j++) {
      if (Math.pow(array1[i], 2) === array2[j] ) {
        array2.splice(j,1);
        counter++;
        break;
      }
    }
  }
  if (counter === array1.length) {
    return true;
  }
  return false;
}

-------------------------------------------------------------------------------------------------------------------------------------------
11)Count the smiley faces! 6kyu

//return the total number of smiling faces in the array
function countSmileys(arr) {
  if (arr.length === 0) {
    return 0;
  };
  let counter = 0;
  for (let i=0; i<arr.length; i++) {
    if (arr[i][0] == ':' || arr[i][0] == ';') {
      if (arr[i][1] == ')' || arr[i][1] == 'D') {
        counter++;
      } else if (arr[i][1] == '-' || arr[i][1] == '~') {
        if (arr[i][2] == ')' || arr[i][2] == 'D') {
          counter++;
        }
      }
    }
  }
  return counter;
}

-------------------------------------------------------------------------------------------------------------------------------------------
12)Multiples of 3 or 5 6kyu
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

function solution(number){
  let arr = [];
  if (number < 0) {
    return 0;
  }
  for (let i=0; i<number; i++) {
    if (i % 3 === 0 && i % 5 === 0) {
      arr.push(i);
      continue;
    }
    if (i % 3 === 0 || i % 5 === 0) {
      arr.push(i);
    }
  }
  return arr.reduce((acc,val) => acc + val, 0);
}

-------------------------------------------------------------------------------------------------------------------------------------------
13)Find the odd int 6kyu
Given an array of integers, find the one that appears an odd number of times.
There will always be only one integer that appears an odd number of times.

function findOdd(A) {
  let counter = 0;
  for (let i=0; i<A.length; i++) {
    for (let j=0; j<A.length; j++) {
      if (A[i] === A[j]) {
        counter++;
      }
    }
    if (counter % 2 === 1) {
      return A[i];
    } else {
      counter = 0;
    }
  }
}

-------------------------------------------------------------------------------------------------------------------------------------------
14)Simple Pig Latin 5kyu
Move the first letter of each word to the end of it, then add "ay" to the end of the word. Leave punctuation marks untouched.

function pigIt(str){
  let arr = str.split(' ');
  let finalArr = [];
  let reg = /[a-z]/i;
  for (let i=0; i<arr.length; i++) {
    let word = arr[i].split('');
    let letter = word.splice(0,1);
    if (reg.test(letter)) {
      finalArr.push(word.join('').concat(letter, 'ay'));
    } else {
      finalArr.push(word.join('').concat(letter));
    }
  }
  return finalArr.join(' ');
}

-------------------------------------------------------------------------------------------------------------------------------------------
15)Moving Zeros To The End 5kyu

function moveZeros(arr) {
  let zeros = arr.filter(val => val === 0);
  return (arr.filter(val => val !== 0)).concat(zeros);
}

-------------------------------------------------------------------------------------------------------------------------------------------
16)Human Readable Time 5kyu
Write a function, which takes a non-negative integer (seconds) as input and returns the time in a human-readable format (HH:MM:SS)

function humanReadable (seconds) {
  let hours = Math.floor(seconds / 3600);
  let minutes = Math.floor(((seconds/3600) - hours) * 60);
  let secondss = Math.round(((((seconds/3600) - hours) * 60) - minutes) * 60);
  let arr = [hours, minutes, secondss];
  let finalArr = [];
  for (let i=0; i<arr.length; i++) {
    if (arr[i] < 10) {
      finalArr.push('0'+ arr[i]);
    } else finalArr.push(arr[i])
  }
  return finalArr.join(':');
}

-------------------------------------------------------------------------------------------------------------------------------------------
17)Where my anagrams at? 5kyu
Write a function that will find all the anagrams of a word from a list.
You will be given two inputs a word and an array with words.
You should return an array of all the anagrams or an empty array if there are none.

function anagrams(word, words) {
  let arrOfWords = [];
  let sortedWord = word.split('').sort().join('');
  let finalArr = [];
  for (let i=0; i<words.length; i++) {
     arrOfWords.push(words[i].split('').sort().join(''));
  }
  for (let i=0; i<words.length; i++) {
     if (sortedWord === arrOfWords[i]) {
       finalArr.push(words[i]);
     }
  }
  return finalArr;
}

-------------------------------------------------------------------------------------------------------------------------------------------
18)RGB To Hex Conversion 5kyu

function rgb(r, g, b){
  return [r,g,b].map(val => {
    if (val <0) {
      val = 0;
    }
    if (val > 255) {
      val = 255;
    }
    let hex = val.toString(16).toUpperCase();
    if (hex.length === 1) {
      return '0' + hex;
    } else {
      return hex;
    }
  }).join('');
}

-------------------------------------------------------------------------------------------------------------------------------------------
19)Weight for weight 5kyu
For example 99 will have "weight" 18, 100 will have "weight" 1 so in the list 100 will come before 99.
Given a string with the weights of FFC members in normal order can you give this string ordered by "weights" of these numbers?

function orderWeight(strng) {
  let sum = 0;
  let value;
  let arr = strng.split(' ');
  for (let i = 0, endI = arr.length-1; i < endI; i++) {
    for (let j = 0; j < arr.length-1-i; j++) {
      let elemSum = arr[j].split('').reduce((acc,val) => acc + +val, 0);
      let nextelemSum = arr[j+1].split('').reduce((acc,val) => acc + +val, 0);
      console.log(elemSum, nextelemSum);
        if (elemSum > nextelemSum) {
            let temp = arr[j];
            arr[j] = arr[j+1];
            arr[j+1] = temp;
        } else if (elemSum === nextelemSum) {
          if (arr[j].split('') > arr[j+1].split('')) {
            let temp = arr[j];
            arr[j] = arr[j+1];
            arr[j+1] = temp;
          }
        }
    }
  }
  return arr.join(' ');
}  

-------------------------------------------------------------------------------------------------------------------------------------------
20)Pete, the baker 5kyu
Write a function cakes(), which takes the recipe (object) and the available ingredients (also an object) 
and returns the maximum number of cakes Pete can bake (integer). 
For simplicity there are no units for the amounts (e.g. 1 lb of flour or 200 g of sugar are simply 1 or 200). 
Ingredients that are not present in the objects, can be considered as 0.

function cakes(recipe, available) {
  let arr = [];
  let valuesRecipe = Object.keys(recipe);
  let valuesAvailable = Object.keys(available);
  for (let i=0; i<valuesRecipe.length; i++) {
    if (available.hasOwnProperty(valuesRecipe[i])) {
      arr.push(Math.floor((available[valuesRecipe[i]]) / (recipe[valuesRecipe[i]])));
    } else {
      return 0;
    }
  }
  return arr.sort((a,b) => a-b)[0];
}

// Делим каждое значение ключей доступных ресурсов на ключю рецепта с округлением
// Находим минимальное значение среди полученных результатов и возвращаем

-------------------------------------------------------------------------------------------------------------------------------------------
21)First non-repeating character 5kyu

function firstNonRepeatingLetter(s) {
  if (s.length === 0) {
    return ''
  }
  let arr = s.toLowerCase().split('');
  let answer;
  let counter = 0;
  for (let i=0; i<s.length; i++) {
    for (let j=0; j<s.length; j++) {
      if (arr[i] === arr[j]) {
        counter++;
      }
    }
    if (counter === 1) {
      answer = s[i];
      break;
    }
    counter = 0;
  }
  if (answer === undefined) {
    return ''
  }
  return answer;
}


-------------------------------------------------------------------------------------------------------------------------------------------
22)The Hashtag Generator 5kyu
" Hello there thanks for trying my Kata"  =>  "#HelloThereThanksForTryingMyKata"
"    Hello     World   "                  =>  "#HelloWorld"
""                                        =>  false

function generateHashtag (str) {
  let reg = /[a-z]/gi;
  console.log(str.length);
  if (str.match(reg) === null) {
    return false;  
  }
  if (str.length === 0 || str.match(reg).length > 139) {
    return false;
  }
  str = str.replace(/ +/g, ' ').trim();
  console.log(str);
  let arr = str.split(' ').map(val => val[0].toUpperCase() + val.split('').splice(1).join(''));
  console.log('#' + arr.join(''));
  return '#' + arr.join('');
}

-------------------------------------------------------------------------------------------------------------------------------------------
23)Highest Scoring Word 6kyu
Given a string of words, you need to find the highest scoring word.
Each letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.
You need to return the highest scoring word as a string.

let obj = {
  "a": "1",
  "b": "2",
  "c": "3",
  "d": "4",
  "e": "5",
  "f": "6",
  "g": "7",
  "h": "8",
  "i": "9",
  "j": "10",
  "k": "11",
  "l": "12",
  "m": "13",
  "n": "14",
  "o": "15",
  "p": "16",
  "q": "17",
  "r": "18",
  "s": "19",
  "t": "20",
  "u": "21",
  "v": "22",
  "w": "23",
  "x": "24",
  "y": "25",
  "z": "26"
}

function high(x) {
  let newArr = [];
  let max = 1;
  let maxLengthWord;
  let arr = x.split(' ');
  for (let i=0; i<arr.length; i++) {
    for (let j=0; j<arr[i].length; j++) {
      newArr.push(arr[i][j].replace(arr[i][j], obj[arr[i][j]])); 
    }
    let sumOfElems = newArr.reduce((acc,val) => acc + +val, 0);
    if (sumOfElems > max) {
      max = sumOfElems;
      maxLengthWord = arr[i];
    }
    sumOfElems = 0;
    newArr.length = 0;
  }
  return maxLengthWord;
}

-------------------------------------------------------------------------------------------------------------------------------------------
24)Count the number of Duplicates 6kyu
Write a function that will return the count of distinct case-insensitivealphabetic
characters and numeric digits that occur more than once in the input string.

function duplicateCount(text){
  return text
    .toLowerCase()
    .split('')
    .sort()
    .filter((val,i,arr) => arr[i] === arr[i+1])
    .filter((val,i,arr) => arr[i] !== arr[i+1])
    .length
}

-------------------------------------------------------------------------------------------------------------------------------------------
25)Meeting 6kyu
Could you make a program that
makes this string uppercase
gives it sorted in alphabetical order by last name.

function meeting(s) {
  return '(' + s
    .toUpperCase()
    .split(';')
    .map(val => val.split(':').reverse())
    .sort()
    .map(val => val.join(', '))
    .join(')(') 
    + ')';
}

-------------------------------------------------------------------------------------------------------------------------------------------
26)Good vs Evil 6kyu
Middle Earth is about to go to war.
The forces of good will have many battles with the forces of evil.
Different races will certainly be involved.
Each race has a certain worth when battling against others.
On the side of good we have the following races, with their associated worth

function goodVsEvil(good, evil){
  let goodArr = good.split(' ');
  let goodPotential = [];
  goodPotential.push(goodArr[0]*1);
  goodPotential.push(goodArr[1]*2);
  goodPotential.push(goodArr[2]*3);
  goodPotential.push(goodArr[3]*3);
  goodPotential.push(goodArr[4]*4);
  goodPotential.push(goodArr[5]*10);

  let evilArr = evil.split(' ');
  let evilPotential = [];
  evilPotential.push(evilArr[0]*1);
  evilPotential.push(evilArr[1]*2);
  evilPotential.push(evilArr[2]*2);
  evilPotential.push(evilArr[3]*2);
  evilPotential.push(evilArr[4]*3);
  evilPotential.push(evilArr[5]*5);
  evilPotential.push(evilArr[6]*10);
  
  let goodWorth = goodPotential.reduce((acc,val) => acc + val, 0);
  let evilWorth = evilPotential.reduce((acc,val) => acc + val, 0);
  console.log(evilWorth);
  console.log(goodWorth);
  
  if (goodWorth > evilWorth) {
    return 'Battle Result: Good triumphs over Evil';
  }
  if (goodWorth < evilWorth) {
    return 'Battle Result: Evil eradicates all trace of Good';
  }
  return 'Battle Result: No victor on this battle field';
}

-------------------------------------------------------------------------------------------------------------------------------------------
27)Data Reverse 6kyu
A stream of data is received and needs to be reversed.
Each segment is 8 bits long, meaning the order of these segments needs to be reversed

function dataReverse(data) {
  let arr = [];
  console.log(data.length);
  for (let i=1; i<data.length+1; i++) {
    arr.push(data[i-1]);
    if (i % 8 === 0) {
      arr.push(';')
    }
  }
  let newArr = arr.join('').split(';');
  newArr.pop();
  return newArr.reverse().join('').split('').map(val => +val);
}

-------------------------------------------------------------------------------------------------------------------------------------------
28)
